[
  {
    "objectID": "R and Bioconductor based Workflow for Downstream Analysis of LFQ Food and Meat Proteomics Data.html#parameters",
    "href": "R and Bioconductor based Workflow for Downstream Analysis of LFQ Food and Meat Proteomics Data.html#parameters",
    "title": "down stream proteomics workflow for meat science",
    "section": "1 Parameters",
    "text": "1 Parameters\n\n# do renv::restore() and renv:activate() as global setup\n\n# Import quant_data and sample_data as parameter\n\nfeature_key_column &lt;- \"Accession\" # comment it later\nquantdata_key_column &lt;- \"Accession\"\nsample_key_column &lt;- \"sample\" # quantCols (suggested names callouts)\n\n# Instead only mention paths\nquant_data_path &lt;- \"data/quant_data.csv\"\ns_data_path &lt;- \"data/sample_data.csv\"\n\n# refernce for columns in sample data,\n\ntreatmen1_ref &lt;- \"\" # if kept empty nothing is considered as control\ntreatmen2_ref &lt;- \"\"\n# treatmen3_ref &lt;- \"\" # keep adding as many treatments you have\n\n# imputation technique\n imputation_algo &lt;- \"knn\" #(suggest all the possible imputation but customizable): \"orig\", \"knn\", \"zero\", \"MinDet\", \"bpca\"\n \n# normalisation techniques\nnormalization_algo &lt;- \"center.median\" #sum, max, center.mean, center.median, div.mean, div.median, diff.median, quantiles, quantiles.robust, vsn"
  },
  {
    "objectID": "R and Bioconductor based Workflow for Downstream Analysis of LFQ Food and Meat Proteomics Data.html#importing-data",
    "href": "R and Bioconductor based Workflow for Downstream Analysis of LFQ Food and Meat Proteomics Data.html#importing-data",
    "title": "down stream proteomics workflow for meat science",
    "section": "2 Importing Data",
    "text": "2 Importing Data\n\n2.1 Gene ID has multiple entries one cell\n\n2.1.1 Importing Raw Data\n\n# #| eval: false\n# \n# pacman::p_load(tidyverse) \n# quant_data &lt;- read.csv(\"data/sample_lfq_data.csv\")\n# # s_data &lt;- read.csv(\"data/sample_metadata.csv\") # sample_attributes\n\n\n\n2.1.2 Enriching/populating the feature data\n\n# #| eval: false\n# \n# # pacman::p_load(tidyverse, modules, httr, jsonlite) \n# # multipleAccessionHandling &lt;- use(\"R/01_multipleAccessionHandling.R\")\n# source(\"R/01_multipleAccessionHandling.R\")\n# \n# \n# f_quant_data &lt;- getCleanAccession(quant_data, \"Accession\", \"\\\\b[A-Za-z0-9]+(?=\\\\|)\")\n# \n# r_data &lt;- populateGeneNamesfromMultipleAccession(f_data, \"Accession\", \",\", information = \"accession,gene_primary,gene_synonym,organism_name,protein_name,sequence\", countAccession = countAccession, getGeneUniProt = getGeneUniProt, getGeneInformationforMultipleAccession = getGeneInformationforMultipleAccession, verbose_ = FALSE)\n\n\n\n\n2.2 \n\n# #| eval: false\n# \n# pacman::p_load(import, glue, httr, progress)\n# \n# # write.csv(r_data[, c(1, 7:ncol(r_data))],\"data/quant_data.csv\", row.names = FALSE)\n# \n# write.csv(r_data[, 1:6], \"data/feature_data.csv\", row.names = FALSE)\n\n\n\n2.3 Gene ID has single entries in cell\n\n2.3.1 Importing Raw Data\n\npacman::p_load(tidyverse)\n\nquant_data &lt;-  read.csv(quant_data_path) #%&gt;%  # LFQ quantified data\n  # column_to_rownames(var = feature_key_column) # make the first column as row name\n\nf_data &lt;- read.csv(\"data/feature_data.csv\") #%&gt;% # feature_attributes, primary key (unique) should be uniprot accession gene id\n  # column_to_rownames(var = feature_key_column)\n\ns_data &lt;- read.csv(s_data_path) %&gt;% \n  mutate(across(all_of(sample_key_column), make.names)) %&gt;%\n  # column_to_rownames(var = sample_key_column) %&gt;% \n  dplyr::rename(quantCols = all_of(sample_key_column))"
  },
  {
    "objectID": "R and Bioconductor based Workflow for Downstream Analysis of LFQ Food and Meat Proteomics Data.html#preparing-a-qfeature-object",
    "href": "R and Bioconductor based Workflow for Downstream Analysis of LFQ Food and Meat Proteomics Data.html#preparing-a-qfeature-object",
    "title": "down stream proteomics workflow for meat science",
    "section": "3 Preparing a QFeature object",
    "text": "3 Preparing a QFeature object\n\n3.1 Creating the QFeature object\n\npacman::p_load(BiocManager, BiocStyle) # will go to global environment\npacman::p_load(QFeatures)\n\n# creating assayData\nassayData &lt;-  f_data %&gt;% \n  full_join(quant_data, by = feature_key_column)\n\n# name for the assay\ninitial_assayName &lt;- \"proteomics_data\"\n\n# creating QFeature object\ndata &lt;- readQFeatures(\n  assayData,\n  quantCols  = (ncol(f_data)+1):ncol(assayData),\n  fnames = feature_key_column,\n  colData = s_data,\n  name = initial_assayName\n)\n\nChecking arguments.\n\n\nLoading data as a 'SummarizedExperiment' object.\n\n\nFormatting sample annotations (colData).\n\n\nFormatting data as a 'QFeatures' object.\n\n# adding column details also for summarizedExperiment object\ncolData(data[[initial_assayName]]) &lt;- colData(data)\n\n\n\n3.2 Inspecting the QFeature Object\n\nQFeature objectsummarizedExperiment Objectrow data (features) informationcol data (samples) information (summarizedExperiment object)col data (samples) information (QFeature object)assay data\n\n\n\n# QFeature object\ndata\n\nAn instance of class QFeatures containing 1 assays:\n [1] proteomics_data: SummarizedExperiment with 755 rows and 32 columns \n\n\n\n\n\n# summarizedExperiment Object\ndata[[initial_assayName]]\n\nclass: SummarizedExperiment \ndim: 755 32 \nmetadata(0):\nassays(1): ''\nrownames(755): A0A3Q1M2L8 Q3ZC07 ... A5D9E8 F1N690\nrowData names(6): Accession Gene_primary ... Protein_name Sequence\ncolnames(32): X4087_10_255_LT X4088_12_259 ... X4147_64_330_LT\n  X4148_62_324\ncolData names(3): quantCols Slaughter_Condition Feeding_Regime\n\n\n\n\n\n# row data (features) information\nhead(rowData(data[[initial_assayName]]), 3)\n\nDataFrame with 3 rows and 6 columns\n             Accession Gene_primary Gene_synonym Organism_name  Protein_name\n           &lt;character&gt;  &lt;character&gt;  &lt;character&gt;   &lt;character&gt;   &lt;character&gt;\nA0A3Q1M2L8  A0A3Q1M2L8        TOP2B           NA Bos taurus... DNA topois...\nQ3ZC07          Q3ZC07        ACTC1         ACTC Bos taurus... Actin, alp...\nA0A3Q1M9X9  A0A3Q1M9X9       PTPN14           NA Bos taurus... Protein ty...\n                Sequence\n             &lt;character&gt;\nA0A3Q1M2L8 MWVYDEDVGM...\nQ3ZC07     MCDDEETTAL...\nA0A3Q1M9X9 MPFGLKLRRT...\n\n\n\n\n\n# col data (samples) information\nhead(colData(data[[initial_assayName]]), 3) #summarizedExperiment object\n\nDataFrame with 3 rows and 3 columns\n                    quantCols Slaughter_Condition Feeding_Regime\n                  &lt;character&gt;         &lt;character&gt;    &lt;character&gt;\nX4087_10_255_LT X4087_10_2...            NoStress          Lipid\nX4088_12_259    X4088_12_2...            NoStress          Lipid\nX4089_24_270    X4089_24_2...            NoStress          Lipid\n\n\n\n\n\n# col data (samples) information\nhead(colData(data), 3) # QFeature object\n\nDataFrame with 3 rows and 3 columns\n                    quantCols Slaughter_Condition Feeding_Regime\n                  &lt;character&gt;         &lt;character&gt;    &lt;character&gt;\nX4087_10_255_LT X4087_10_2...            NoStress          Lipid\nX4088_12_259    X4088_12_2...            NoStress          Lipid\nX4089_24_270    X4089_24_2...            NoStress          Lipid\n\n\n\n\n\n# assay data\nhead(assay(data[[initial_assayName]]), 2)\n\n           X4087_10_255_LT X4088_12_259 X4089_24_270 X4107_44_268_LT\nA0A3Q1M2L8        708674.7     651387.5     640716.3        605496.1\nQ3ZC07          43815348.1   77775446.2   29781602.0      51451617.0\n           X4095_2_265 X4096_15_260 X4090_22_302 X4091_23_282 X4092_1_308\nA0A3Q1M2L8    462056.4     596891.6     273604.5     394407.6    372989.6\nQ3ZC07      38834227.6   45409152.5   85496006.1   54179612.2  76447864.7\n           X4093_3_316 X4094_14_320 X4108_42_297 X4109_34_301 X4110_18_311\nA0A3Q1M2L8    330667.9     337589.7     632592.1     604599.6       481858\nQ3ZC07      54079415.3   48040680.7   37724931.3   55162289.4     32403738\n           X4111_29_305 X4112_35_321 X4113_17_277 X4114_21_267 X4115_25_275\nA0A3Q1M2L8     534242.1     548742.2     434293.6     534974.3     377543.1\nQ3ZC07       60325364.8   54716847.9   37505829.0   63223584.1   43973070.7\n           X4116_20_286 X4127_39_304_LT X4128_33_280 X4129_31_314 X4130_52_331\nA0A3Q1M2L8     407411.9        397311.2     619823.4     461125.6     588833.2\nQ3ZC07       31270801.7      30505421.8   52353566.4   35614246.8   43615578.4\n           X4131_47_251 X4132_55_269 X4133_51_258 X4134_37_287 X4135_45_303\nA0A3Q1M2L8     516580.9     422994.9     593874.7     470973.2     603675.9\nQ3ZC07       30286412.4   55827616.3   39881508.0   52794107.8   47972250.3\n           X4136_43_299 X4147_64_330_LT X4148_62_324\nA0A3Q1M2L8     597141.1        659786.6     812408.9\nQ3ZC07       19705375.8      19975536.4    9576858.0\n\n\n\n# QFeature object\nmessage(\" QFeature object\")\ndata\n\n# summarizedExperiment Object\nmessage(\"\\n \\n summarizedExperiment Object\")\ndata[[initial_assayName]]\n\n# row data (features) information\nmessage(\"\\n \\n row data (features) information\")\nhead(rowData(data[[initial_assayName]]), 3)\n\n# col data (samples) information\nmessage(\"\\n col data (samples) information (summarizedExperiment object)\")\nhead(colData(data[[initial_assayName]]), 3) #summarizedExperiment object\n\nmessage(\"\\n col data (samples) information (QFeature object)\")\nhead(colData(data), 3) # QFeature object\n\n# assay data\nmessage(\"\\n \\n assay data\")\nhead(assay(data[[initial_assayName]]), 2)\n\nmessage(\"\\n \\n Warning: We are printing less rows for a better viewing using head() function.\")"
  },
  {
    "objectID": "R and Bioconductor based Workflow for Downstream Analysis of LFQ Food and Meat Proteomics Data.html#pre-processing-of-the-data",
    "href": "R and Bioconductor based Workflow for Downstream Analysis of LFQ Food and Meat Proteomics Data.html#pre-processing-of-the-data",
    "title": "down stream proteomics workflow for meat science",
    "section": "4 Pre-processing of the data",
    "text": "4 Pre-processing of the data\n\n4.1 Missing value Handling\n\n4.1.1 Missing value exploration and visualization\n\nDescriptive InformationMissing value visualization of overall dataMissing value visualization of features with missing data\n\n\n\n# Exploring missing values\ndata[[initial_assayName]] &lt;- zeroIsNA(data[[initial_assayName]])\nNA_data &lt;- nNA(data[[initial_assayName]])\nNA_data\n\n$nNA\nDataFrame with 1 row and 2 columns\n        nNA       pNA\n  &lt;integer&gt; &lt;numeric&gt;\n1       532 0.0220199\n\n$nNArows\nDataFrame with 755 rows and 3 columns\n           name       nNA       pNA\n    &lt;character&gt; &lt;integer&gt; &lt;numeric&gt;\n1    A0A3Q1M2L8         0         0\n2        Q3ZC07         0         0\n3    A0A3Q1M9X9         0         0\n4        E1B9H3         0         0\n5    A0A452DIB2         0         0\n...         ...       ...       ...\n751      P04260         0         0\n752  A0A3Q1N1B8         0         0\n753  A0A3Q1MHL7         0         0\n754      A5D9E8         0         0\n755      F1N690         0         0\n\n$nNAcols\nDataFrame with 32 rows and 3 columns\n             name       nNA       pNA\n      &lt;character&gt; &lt;integer&gt; &lt;numeric&gt;\n1   X4087_10_2...        11 0.0145695\n2   X4088_12_2...         8 0.0105960\n3   X4089_24_2...        26 0.0344371\n4   X4107_44_2...        18 0.0238411\n5   X4095_2_26...        11 0.0145695\n...           ...       ...       ...\n28  X4134_37_2...        20 0.0264901\n29  X4135_45_3...        26 0.0344371\n30  X4136_43_2...        11 0.0145695\n31  X4147_64_3...        18 0.0238411\n32  X4148_62_3...        19 0.0251656\n\n\n\n\n\n# Visualizing the whole data\npacman::p_load(naniar)\n\nvis_miss(as.data.frame(t(assay(data[[initial_assayName]]))), sort_miss = TRUE, show_perc_col = FALSE) +\n  labs(x = \"Genes\") +\n  theme(axis.text.x = element_blank())\n\n\n\n\n\n\n\n\n\n\n\ncol_with_missingval &lt;- as.data.frame(t(assay(data[[initial_assayName]]))) %&gt;%\n  select(where(~ any(is.na(.))))\n\nvis_miss(col_with_missingval, sort_miss = TRUE, show_perc = FALSE) +\n  labs(x = \"Genes\") +\n  theme(axis.text.x = element_text(face=\"bold\", size = 7, angle = 90))\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.1.2 Missing data filterting\nFiltering features having more than 10% missing data.\n\n# removing missing value more than 10%, can be changed accordingly\n\nNA_filtered_assayName &lt;- paste0(\"NAfiltered_\", initial_assayName)\n\ndata &lt;- addAssay(data,\n\n                 filterNA(\n\n                   data[[initial_assayName]],\n\n                   pNA = 0.1\n\n                 ),\n\n                 name = NA_filtered_assayName)\n\n\n\n4.1.3 Missing Data Imputation\n\n4.1.3.1 Packages needed\n\npacman::p_load(limma, impute)\n\n\n\n4.1.3.2 Log transformation for easy visualization of imputation\n\nlog_NA_filtered_assayName &lt;- paste0(\"log_\",NA_filtered_assayName)\ndata &lt;- addAssay(data,\n                 logTransform(data[[NA_filtered_assayName]]),\n                 name = log_NA_filtered_assayName)\n\n\n\n4.1.3.3 Imputing missing values and visualization (modify later)\n\nsource(\"R/02_QFeature_related functions.R\")\n\n# fix the function\nvisualize_imputation_density(data, \n                             protein_column = NA_filtered_assayName, \n                             imputation_methods = c(\"knn\", \"zero\", \"MinDet\", \"bpca\"),\n                             colors = c(\"black\", \"red\", \"blue\", \"steelblue\", \"orange\"),\n                             legend_position = \"topright\")\n\n\n\n4.1.3.4 Imputation with imputation_algorithm mentioned in parameters\n\nimputed_NA_filtered_assayName &lt;- paste0(\"imputed_\", NA_filtered_assayName)\ndata &lt;- addAssay(data,\n                 impute(data[[NA_filtered_assayName]], method = tolower(imputation_algo)),\n                 name = imputed_NA_filtered_assayName\n)\n\nImputing along margin 1 (features/rows).\n\n\n\n\n\n\n4.2 Log transformation\n\nlog_imputed_NA_filtered_assayName &lt;- paste0(\"log2_\", imputed_NA_filtered_assayName)\n\ndata &lt;- addAssay(data,\n                 logTransform(data[[imputed_NA_filtered_assayName]], base = 2),\n                 name = log_imputed_NA_filtered_assayName)\n\n\n\n4.3 Normalisation\n\n4.3.0.1 Visualization of different `normalisation`\n\n\n4.3.0.2 Applying `normalisation` to our dataset\n\nnorm_log_imputed_NA_filtered_assayName &lt;- paste0(\"norm\", log_imputed_NA_filtered_assayName)\n\ndata &lt;- addAssay(data,\n                 normalize(data[[log_imputed_NA_filtered_assayName]],\n                           method = normalization_algo),\n                 name = norm_log_imputed_NA_filtered_assayName)"
  },
  {
    "objectID": "R and Bioconductor based Workflow for Downstream Analysis of LFQ Food and Meat Proteomics Data.html#exploratory-analysis",
    "href": "R and Bioconductor based Workflow for Downstream Analysis of LFQ Food and Meat Proteomics Data.html#exploratory-analysis",
    "title": "down stream proteomics workflow for meat science",
    "section": "5 Exploratory Analysis",
    "text": "5 Exploratory Analysis\n\n5.1 Packages\n\npacman::p_load(\n  ggplot2, \n  # plotly, # for interactive plotting\n  glue,\n  gridExtra\n)\nsource(\"R/03_getDimensionalReduction.R\")\n\n\n\n5.2 Visualization\n\n# PCA\ndf_dimensionaReduction &lt;- data[[norm_log_imputed_NA_filtered_assayName]] %&gt;% \n  assay() %&gt;%\n  t()\n\nsample_dimensionaReduction &lt;- data[[norm_log_imputed_NA_filtered_assayName]] %&gt;%\n  colData() %&gt;% \n  assay() %&gt;% \n  as.data.frame()\n\nlabels &lt;- sample_dimensionaReduction %&gt;% select(- \"quantCols\")\n\n\nPCAt-SNEUMAP\n\n\n\n# Defining PCs to plot \n\nx = 1 # PC1\ny = 2 # PC2\nmodel = \"pca\"\n\n# Model building \npca_model &lt;- prcomp(df_dimensionaReduction, scale. = TRUE) \n\n# Extracting PCs \npca_data &lt;- as.data.frame(pca_model$x)\n\n# Calculating explained variance \nexplained_variance &lt;- pca_model$sdev^2 / sum(pca_model$sdev^2)\nexplained_variance &lt;- round(explained_variance * 100, 2)\n\n# Preparing Scree Plot\n\nscree_plot_data &lt;- data.frame(\n  PC_component = paste0('PC ', 1: nrow(df_dimensionaReduction)), \n  explained_variance = cumsum(explained_variance)\n) # changed: nrow(metabo_data)\n\ncomponents_to_show = 10\n\nscree_plot &lt;- generate_pca_scree_plot(scree_plot_data, components_to_show)\n\n# preparing plot in a list t be plotted\nplot_list &lt;- list()\nplot_list[[\"scree_plot\"]] &lt;- scree_plot\n\nfor (label in colnames(labels)) {\n  assign(paste0(\"fig_pca_Plot_\", label), \n         generate_dimension_reduction_plot(\n           model, \n           x, \n           y, \n           pca_data, \n           label, \n           labels, \n           explained_variance = NULL))\n  \n  plot_list[[paste0(\"fig_pca_Plot_\", label)]] &lt;- get(paste0(\"fig_pca_Plot_\", label))\n}\n\nsuppressWarnings({\n  n &lt;- dim(matrix(1:(ncol(sample_dimensionaReduction)), nrow = 2))[2]\n  p &lt;- dim(matrix(1:(ncol(sample_dimensionaReduction)), nrow = 2))[1]\n})\n\n# You can also extract plots individually as plot_list$scree_plot, and save with ggsave()\ngrid.arrange(grobs = plot_list, nrow = n, ncol = p) \n\n\n\n\n\n\n\n\n\n\n\npacman::p_load(tsne) #Rtsne,\n\n# Defining parameters to plot \nx = 1\ny = 2 \nperplexity = 20\nmodel = \"tsne\"\n\n# Model building \nset.seed(0)\ntsne_model &lt;- tsne(df_dimensionaReduction, initial_dims = 2)\n# tsne_model &lt;- Rtsne(df, perplexity = perplexity, pca_scale = TRUE) # Alternative\n\n# Extracting tSNE components \ntsne_data &lt;- data.frame(tsne_model)\n# tsne_data &lt;- as.data.frame(tsne_model$Y) # Alternative\n\nrownames(tsne_data) &lt;- rownames(df_dimensionaReduction)\n\n\n# preparing tSNE plots \nplot_list &lt;- list() \nfor (label in colnames(labels)) {\n  assign(paste0(\"fig_tsne_Plot_\", label), \n         generate_dimension_reduction_plot(\n           model, \n           x, \n           y, \n           tsne_data, \n           label, \n           labels, \n           explained_variance = NULL))\n  \n  plot_list[[paste0(\"fig_tsne_Plot_\", label)]] &lt;- get(paste0(\"fig_tsne_Plot_\", label))\n}\n\nsuppressWarnings({\n  n &lt;- dim(matrix(1:(ncol(sample_dimensionaReduction)-1), nrow = 2))[2]\n  p &lt;- dim(matrix(1:(ncol(sample_dimensionaReduction)-1), nrow = 2))[1]\n})\n\ngrid.arrange(grobs = plot_list, nrow = n, ncol = p) \n\n\n\n\n\n\n\n\n\n\n\npacman::p_load(umap)\n\n# Defining parameters to plot \nx = 1\ny = 2 \nmodel = \"umap\"\n\n# Model building  \nset.seed(0)\numap_model &lt;- umap(df_dimensionaReduction, n_components = 2, random_state = 15)\n\n# Extracting UMAP components\numap_data &lt;- data.frame(umap_model[[\"layout\"]]) \n\n# preparing UMAP plots \nplot_list &lt;- list()\n\nfor (label in colnames(labels)) {\n  assign(paste0(\"fig_umap_Plot_\", label), \n         generate_dimension_reduction_plot(\n           model, \n           x, \n           y, \n           umap_data, \n           label, \n           labels, \n           explained_variance = NULL))\n  \n  plot_list[[paste0(\"fig_umap_Plot_\", label)]] &lt;- get(paste0(\"fig_umap_Plot_\", label))\n}\n\n# Automating the grids for plottig\nsuppressWarnings({\n  n &lt;- dim(matrix(1:(ncol(sample_dimensionaReduction)-1), nrow = 2))[2]\n  p &lt;- dim(matrix(1:(ncol(sample_dimensionaReduction)-1), nrow = 2))[1]\n})\n\ngrid.arrange(grobs = plot_list, nrow = n, ncol = p)"
  },
  {
    "objectID": "R and Bioconductor based Workflow for Downstream Analysis of LFQ Food and Meat Proteomics Data.html#statistical-analysis",
    "href": "R and Bioconductor based Workflow for Downstream Analysis of LFQ Food and Meat Proteomics Data.html#statistical-analysis",
    "title": "down stream proteomics workflow for meat science",
    "section": "6 Statistical Analysis",
    "text": "6 Statistical Analysis\n\n6.1 LIMMA Analysis\n\npacman::p_load(limma, tidyverse)\nsource(\"R/04_limma.R\")\n# parameters\nmultiple_testing_adjusting_method &lt;- \"none\" # possible methods: \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"BY\", \"fdr\", \"none\", check p.adjust.methods for more.\n\n# Importing the numeric data and corresponding sample_data for Differential Expression Analysis\nassay_data &lt;- assay(data[[norm_log_imputed_NA_filtered_assayName]])\nsample_data &lt;- colData(data)[, -1]\n\n# Converting character columns into a singular column\nif(all(sapply(sample_data, is.character))) {\n  # Collapse columns into a new column if all are character type\n  sample_data$combined &lt;- apply(sample_data, 1, function(row) paste(row, collapse = \"_and_\"))\n  sample_data$combined &lt;- factor(sample_data$combined)\n} else {\n  stop(\"Not all columns are character types!\")\n}\n\n# Creating a design matrix\ndesign &lt;- model.matrix(~ 0 + combined, data = sample_data)\ncolnames(design) &lt;- gsub(\"combined\", \"\", colnames(design))\n\n# fitting the model\nfit &lt;- lmFit(assay_data, design)\n\n# creating contrasts\n\ncontrasts_group &lt;- makeContrasts(\n  Stress_vs_NoStress = \"(Stress_and_Lipid_VitE_PlantExt + Stress_and_Lipid_VitE + Stress_and_Lipid)/3 - (NoStress_and_Lipid + NoStress_and_Lipid_VitE + NoStress_and_Lipid_VitE_PlantExt)/3\",\n  Lipid_VitE_vs_Lipid_NoStress = \"NoStress_and_Lipid_VitE - NoStress_and_Lipid\",\n  Lipid_VitE_PlantExt_vs_Lipid_NoStress = \"NoStress_and_Lipid_VitE_PlantExt - NoStress_and_Lipid\",\n  Lipid_VitE_PlantExt_vs_Lipid_VitE_NoStress = \"NoStress_and_Lipid_VitE_PlantExt - NoStress_and_Lipid_VitE\",\n  Lipid_VitE_vs_Lipid_Stress = \"Stress_and_Lipid_VitE - Stress_and_Lipid\",\n  Lipid_VitE_PlantExt_vs_Lipid_Stress = \"Stress_and_Lipid_VitE_PlantExt - Stress_and_Lipid\",\n  Lipid_VitE_PlantExt_vs_Lipid_VitE_Stress = \"Stress_and_Lipid_VitE_PlantExt - Stress_and_Lipid_VitE\",\n  levels=design)\n\nfit_contrasts &lt;- contrasts.fit(fit, contrasts_group)\nfit_contrasts_bayes &lt;- eBayes(fit_contrasts)\n\n\nDAP_table &lt;- getDAPlist(fit_contrasts_bayes, contrasts_group, information_DE = c(\"logFC\",\"AveExpr\", \"P.Value\",\"adj.P.Val\"), multiple_testing_adjusting_method = \"none\")\n\n\n\n6.2 LIMMA Result Visualization\n\nLIMMA Result TableVolcano PlotUpSet Plot\n\n\n\npacman::p_load(reactable)\n\nfeature_data &lt;- rowData(data[[norm_log_imputed_NA_filtered_assayName]]) %&gt;% as.data.frame()\n\nDAP_table_feature_data &lt;- feature_data[, c(quantdata_key_column, \"Gene_primary\", \"Protein_name\")] %&gt;%\n  right_join(\n    rownames_to_column((DAP_table),\n                       var = quantdata_key_column),\n    by = quantdata_key_column)\n\nrmarkdown::paged_table(DAP_table_feature_data)\n\n\n  \n\n\n# for further analysis if gene name is not there we are replacing it with accession\nDAP_table_feature_data &lt;- DAP_table_feature_data %&gt;% \n      mutate(Gene_primary = if_else(\n    is.na(Gene_primary),\n    paste0(\"*\", .data[[quantdata_key_column]], \"*\"),\n    Gene_primary\n  ))\n\n\n\n\n# Volcano Plot for Stress vs No Stress\n\npacman::p_load(ggplot2,\n               extrafont,\n               ggrepel,\n               glue,\n               ggpp)\nloadfonts(device = \"win\")\nsource(\"R/04_limma.R\")\n\n# use gg_table to include the gene names\nDAP_table_factor &lt;- DAP_table_feature_data[, c(\"Gene_primary\", \"logFC_Stress_vs_NoStress\", \"adj.P.Val_Stress_vs_NoStress\")]\nFactorLevel.1 &lt;- \"Stress\"\nFactorLevel.2 &lt;- \"NoStress\"\nlegend_title = \"pre-slaughter \\nstress condition\"\n\n\ngetVolcanoPlot(DAP_table_factor, FactorLevel.1, FactorLevel.2, mrlimit = 1.2, legend_title = legend_title)\n\n[1] 24\n[1] 32\n[1] 661\n\n\n\n\n\n\n\n\n\n\n\n\npacman::p_load(ggupset, grid)\nsource(\"R/04_limma.R\")\n\n# This is for differences between feeding regime given stress and no stress\npValue_Limit= 0.05\nDAP_table_feature_interaction &lt;- DAP_table_feature_data[, c(1:3, 8:ncol(DAP_table_feature_data))] %&gt;% \n  column_to_rownames(quantdata_key_column)\n\ncolnames(DAP_table_feature_interaction) &lt;- gsub(\"_vs_\", \"-\", colnames(DAP_table_feature_interaction))\n\n# NOSTRESS DATA: data.frame for differences between feeding regime given no stress\n## column names having adj.P.Value and _NoStress is getting filtered\ncol_names_nostress_df &lt;- grepl(\n  \"adj\\\\.P\\\\.Val.*_NoStress\", \n  colnames(DAP_table_feature_interaction)\n)\nnostress_df &lt;- DAP_table_feature_interaction[, col_names_nostress_df]\n## the column names are getting clean\ncolnames(nostress_df) &lt;- gsub(\"adj.P.Val_|_NoStress\", \"\", colnames(nostress_df))\n\n## creating column that to be plotted in upSet diagram\nno_of_comparison_col_nostress&lt;- 1:ncol(nostress_df)\n\nfor (i in 1: nrow(nostress_df)){\n  nostress_df$comparison[i] &lt;- str_replace_all(\n    paste(\n      unlist(\n        colnames(nostress_df)[c(no_of_comparison_col_nostress)][nostress_df[i, no_of_comparison_col_nostress] &lt;0.05]\n        ), collapse = \"&\")\n    , \"_\", \"+\")\n}\n\n## genes having none of the comparisons significant getting filtered\nupSet_data_nostress &lt;- nostress_df %&gt;% \n  filter(comparison != \"\") %&gt;% \n  select(comparison) %&gt;% \n  table()\n\n# STRESS DATA: data.frame for differences between feeding regime given stress\n## column names having adj.P.Value and _Stress is getting filtered\ncol_names_stress_df &lt;- grepl(\n  \"adj\\\\.P\\\\.Val.*_Stress\", \n  colnames(DAP_table_feature_interaction)\n)\nstress_df &lt;- DAP_table_feature_interaction[, col_names_stress_df]\n## the column names are getting clean\ncolnames(stress_df) &lt;- gsub(\"adj.P.Val_|_Stress\", \"\", colnames(stress_df))\n\n## creating column that to be plotted in upSet diagram\nno_of_comparison_col_stress &lt;- 1:ncol(stress_df)\nfor (i in 1: nrow(stress_df)){ #\n  stress_df$comparison[i] &lt;- str_replace_all(\n    paste(\n      unlist(\n        colnames(stress_df)[c(no_of_comparison_col_stress)][stress_df[i,no_of_comparison_col_stress] &lt;0.05]\n      ), collapse = \"&\"\n    ), \"_\", \"+\")\n}\n\n## genes having none of the comparisons significant getting filtered\nupSet_data_stress &lt;- stress_df %&gt;% \n  filter(comparison != \"\") %&gt;% \n  select(comparison) %&gt;% \n  table()\n\n\nupset1 &lt;- getUpSetPlot(upSet_data_nostress, title = \"A)\", fill_color = \"#1F77B4\")\n\nupset2 &lt;- getUpSetPlot(upSet_data_stress, title = \"B)\", fill_color = \"#FF7F0E\")\n\ngrid.arrange(grobs = list(upset1, upset2), ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\nFor further analysis if gene_id is not present that’s been replaced by Accession."
  },
  {
    "objectID": "R and Bioconductor based Workflow for Downstream Analysis of LFQ Food and Meat Proteomics Data.html#ensemble-feature-selection",
    "href": "R and Bioconductor based Workflow for Downstream Analysis of LFQ Food and Meat Proteomics Data.html#ensemble-feature-selection",
    "title": "down stream proteomics workflow for meat science",
    "section": "7 Ensemble Feature Selection",
    "text": "7 Ensemble Feature Selection\nEFS package only support target variables with two levels. Here we will perform the analysis with factor pre-slaughter stress condition which has two levels a) limited stress (No Stress), b) additional stress (Stress). We will be using NA filtered and imputed columns.\n\n7.1 Data Preparation\n\npacman::p_load(EFS)\n\n# Preparing data for EFS\nEFS_data &lt;- assay(data[[imputed_NA_filtered_assayName]]) %&gt;% \n  t() %&gt;% \n  as.data.frame() \nsample_data &lt;- colData(data)[, -1] %&gt;% \n  as.data.frame()\n\nEFS_data &lt;- sample_data %&gt;% \n  select(Slaughter_Condition)%&gt;% \n  merge(EFS_data, by = 0) %&gt;% \n  column_to_rownames(var = \"Row.names\")\n\nEFS_data$Slaughter_Condition &lt;- ifelse(EFS_data$Slaughter_Condition == \"Stress\", 1, 0)\n\nrmarkdown::paged_table(EFS_data)\n\n\n  \n\n\n\n\n\n7.2 Performing feature selection\n\nefs &lt;- ensemble_fs(data = EFS_data, classnumber = 1,\n                   NA_threshold = 0.2, cor_threshold = 0.7,\n                   runs = 100) #, selection = rep(TRUE, 8)\n\n\n\n7.3 Result Visualization\n\n7.3.1 cumulative barplot\n\nsource(\"R/05_EFS.R\")\nfilter_by = 0.5\nbarplot_efs(efs, filter_by = filter_by)\n\n\n\n\n\n\n\n\n\n\n7.3.2 DAE vs EFS genes\n\nsource(\"R/04_limma.R\")\nsource(\"R/05_EFS.R\")\n\n# parameter for the plots\ncolumns_for_volcanoplot &lt;- c(\"Gene_primary\", \"logFC_Stress_vs_NoStress\", \"adj.P.Val_Stress_vs_NoStress\")\n\nDAP_table_factor &lt;- DAP_table_feature_data[, columns_for_volcanoplot]\nFactorLevel.1 &lt;- \"Stress\"\nFactorLevel.2 &lt;- \"NoStress\"\nlegend_title = \"pre-slaughter \\nstress condition\"\n\n\nvolcano_plot&lt;- invisible(getVolcanoPlot(DAP_table_factor, FactorLevel.1, FactorLevel.2, mrlimit = 1.2, legend_title = legend_title))\n\n[1] 24\n[1] 32\n[1] 661\n\n# We will be taking genes which \n\n\nEFS_genes_filterby &lt;- DAP_table_feature_data[[quantdata_key_column]][DAP_table_feature_data[[quantdata_key_column]] %in% colnames(efs[,colSums(efs)&gt;filter_by])]\n\nEFS_volcano_data &lt;- DAP_table_feature_data %&gt;% \n  filter(.data[[quantdata_key_column]] %in% EFS_genes_filterby) %&gt;% \n  select(columns_for_volcanoplot)\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(columns_for_volcanoplot)\n\n  # Now:\n  data %&gt;% select(all_of(columns_for_volcanoplot))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\nEFS_plot &lt;- getVolcanoPlotEFS(DAP_table_factor, FactorLevel.1, FactorLevel.2, mrlimit = 1.2, pValue_Limit= 0.05, legend_title = legend_title, additional_data = EFS_volcano_data)\n\ngrid.arrange(grobs = list(volcano_plot,EFS_plot), nrow = 1, ncol = 2)\n\n\n\n\n\n\n\n\n\n\n7.3.3 ROC Curve for model evaluation"
  }
]